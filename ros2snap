#!/bin/sh
# Create snappy package from a ROS package including the 
# run dependencies of the corresponding package.
# Defaults to the "jade" release, but you may specify 
# "indigo" or another release as first command line
# argument.
#
# The script should be launched from the root of the catkin overlay
#
# (C) 2015 Erle Robotics S.L.
# Author: VÃ­ctor Mayoral Vilches <victor@erlerobot.com>

VERSION=1.0
USAGE="Usage: `basename $0` [-rvsh] <ros-pkg-name>"
SNAP=0

if [ $# -eq 0 ]
  then
    echo "ros2snap [-rvsh] <ros-pkg-name>"
    exit 1
fi

ROSNAME=$1

while getopts rvsh: OPT; do
    case "$OPT" in
        r)
            echo "compiling the ROS package"
            catkin_make_isolated --install --pkg $2
            ROSNAME=$2
            #exit 0
            ;;
        v)
            echo "`basename $0` version $VERSION"
            exit 0
            ;;
        s)
            SNAP=1            
            ;;            
        h)
            echo "Usage: `basename $0` [-rvsh] <ros-pkg-name>"
            echo "		-r: compile the ros package"
            echo "		-v: version"
            echo "		-s: create a snap"
            echo "		-h: show this help"
            exit 0
            ;;            
        \?)
            # getopts issues an error message
            echo $USAGE >&2
            exit 1
            ;;
    esac
done

ROSNAME_FINAL=$(echo $ROSNAME|sed 's/_/-/g')

# add snappy metadata
mkdir -p install_isolated/meta
cat <<EOF > install_isolated/meta/package.yaml
name: ros2snap
architecture: `dpkg --print-architecture`
version: 0.1
vendor: Erle Robotics <contact@erlerobot.com>
binaries:
 - name: bin/$ROSNAME_FINAL
EOF

cat <<EOF > install_isolated/meta/readme.md
ROS package autogenerated from ros2snap. 
Automatically create a snap package from a ROS one.

https://github.com/erlerobot/ros2snap
EOF

# FIXME: add wrapper to make deb lib packages work from /apps/... (will be
# fixed once we do proper overlay mounting of /debs into the app ns)
mkdir -p install_isolated/bin
cat <<EOF > install_isolated/bin/$ROSNAME_FINAL
#!/bin/bash -e
mydir=\$(dirname \$(dirname \$0))
export PYTHONPATH=\$mydir/lib/python2.7/dist-packages:\$PYTHONPATH
export PATH=\$mydir/bin:\$PATH
export LD_LIBRARY_PATH=\$mydir/lib:\$mydir/lib/arm-linux-gnueabihf:\$mydir/lib:\$mydir/lib/arm-linux-gnueabihf:/home/ubuntu/trusty/opt/ros/indigo/lib:/home/ubuntu/trusty/usr/lib/arm-linux-gnueabihf:/home/ubuntu/trusty/usr/lib/:/home/ubuntu/trusty/opt/ros/indigo/lib/:\$PYTHONPATH
export ROS_PACKAGE_PATH=\$mydir/share:\$mydir/stacks:\$ROS_PACKAGE_PATH
. \$mydir/setup.bash
#rosrun $1 $1
\$mydir/lib/$1/$1
EOF
chmod 755 install_isolated/bin/$ROSNAME_FINAL


# Figure out run dependencies of the ROS package and add them
DEPS=$(cat src/ros_erle_takeoff_land/package.xml | grep -v "<!" |  grep -oP '(?<=run_depend>)[^<]+')
for i in $DEPS
do  echo "Computing dependencies for $i"	
	for f in `dpkg -L ros-indigo-$i`; 
	do [ -f $f ] || continue;
	 d=${f#/};
	 directorio=$(dirname $d| sed 's$opt/ros/indigo/$$')
	 mkdir -p install_isolated/$directorio; 
	 cp -a $f install_isolated/$directorio; 
	 #echo "copying $f in install_isolated/$directorio"
	done
done

if [ $SNAP -eq 1 ]; then
	snappy build install_isolated
fi


echo "Successfully built $1 snap"
